[env]

# Common
ROOT = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}"
TARGET_DIR = "${ROOT}/target"
SCRIPTS_DIR = "${ROOT}/scripts"

NC = '\033[0m'
B = '\033[1m'
BY = '\033[1;33m'
BV = '\033[1;35m'

CARGO_DEFAULT_OPTS="--workspace --all-features --locked"

# Documentation specifics
DOCS_OUTPUT_DIR = "${TARGET_DIR}/doc"
DOCS_COV_OUTPUT_DIR = "${TARGET_DIR}/cov-doc"
DOCS_COV_RESULTS = "${DOCS_COV_OUTPUT_DIR}/coverage.txt"
DOCS_COV_HTML = "${DOCS_COV_OUTPUT_DIR}/coverage.html"

# Tests specifics
TESTS_COV_HTML = "tarpaulin-report.html"

# Sanity
SAN_OUTPUT_DIR = "${TARGET_DIR}/sanity"
SAN_INPUT_BUILD_TIMINGS = "${TARGET_DIR}/cargo-timings/cargo-timing.html"

# ------------------------------------------------------------------------------
# Show help by default
# ------------------------------------------------------------------------------

[tasks.default]
workspace = false
clear = true
script = '''
echo "${BY}Available commands:${NC}\n"
echo "  ${BV}build-timings${NC}       Show build timings"
echo ""
echo "  ${BV}clippy${NC}              Run cargo clippy"
echo ""
echo "  ${BV}cov-docs${NC}            Generate documentation coverage results"
echo "  ${BV}cov-docs-show${NC}       Show the HTML results of the documentation coverage"
echo ""
echo "  ${BV}doc${NC}                 Generate documentations for the crates"
echo ""
echo "  ${BV}crates-audit${NC}        Make an audit of the crates"
echo "  ${BV}crates-bloats${NC}       Show the list of crates inside the binary with their size"
echo "  ${BV}crates-licenses${NC}     Show the list of licenses by crates"
echo "  ${BV}crates-duplicates${NC}   Show the list of duplicated crates"
echo "  ${BV}crates-unused${NC}       Show the list of unused crates"
echo "  ${BV}crates-upgradables${NC}  Show the list of upgradable crates"
echo ""
echo "  ${BV}sanity${NC}              Generate all reports used for the sanity dashboard"
echo ""
echo "  ${BV}cov-tests${NC}           Generate tests coverage results"
echo "  ${BV}cov-tests-show${NC}      Show the HTML results of the tests coverage"
'''

# ------------------------------------------------------------------------------
# Generate a report with build timings
# ------------------------------------------------------------------------------

[tasks.build-timings]
workspace = false
command = "cargo"
args = ["build", "--timings"]

[tasks.build-timings-sanity]
workspace = false
dependencies = ["build-timings"]
script = '''
cp ${SAN_INPUT_BUILD_TIMINGS} ${SAN_OUTPUT_DIR}/build-timings.html

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/build-timings.html"
'''

# ------------------------------------------------------------------------------
# Run clippy analysis
# ------------------------------------------------------------------------------

[tasks.clippy-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-clippy 1>/dev/null 2>&1
then
    rustup component add clippy
fi
'''

[tasks.clippy]
workspace = false
dependencies = ["clippy-bootstrap"]
command = "cargo"
args = [
  "clippy",
  "--color", "always",
  "-Z", "unstable-options",
  "--workspace",
  "--all-targets",
  "--all-features",
  "--locked",
  "--offline",
  "--keep-going",
  "--", "-D", "warnings"
]

# ------------------------------------------------------------------------------
# Perform an audit of the crates
# ------------------------------------------------------------------------------

[tasks.crates-audit-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-audit 1>/dev/null 2>&1
then
    cargo install cargo-audit
fi
'''

[tasks.crates-audit]
workspace = false
dependencies = ["crates-audit-bootstrap"]
command = "cargo"
args = ["audit"]

[tasks.crates-audit-sanity]
workspace = false
dependencies = ["crates-audit-bootstrap"]
script = '''
cargo audit --json > ${SAN_OUTPUT_DIR}/crates-audit.json || /bin/true

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-audit.json"
'''

# ------------------------------------------------------------------------------
# Show crates bloats
# ------------------------------------------------------------------------------

[tasks.crates-bloats-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-bloat 1>/dev/null 2>&1
then
    cargo install cargo-bloat
fi
'''

[tasks.crates-bloats]
workspace = false
dependencies = ["crates-bloats-bootstrap"]
script = '''
${SCRIPTS_DIR}/sanity/crates/bloats.py --text
'''

[tasks.crates-bloats-sanity]
workspace = false
dependencies = ["crates-bloats-bootstrap"]
script = '''
${SCRIPTS_DIR}/sanity/crates/bloats.py 1>${SAN_OUTPUT_DIR}/crates-bloats.json 2>/dev/null

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-bloats.json"
'''

# ------------------------------------------------------------------------------
# Show crates licenses
# ------------------------------------------------------------------------------

[tasks.crates-licenses-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-license 1>/dev/null 2>&1
then
    cargo install cargo-license
fi
'''

[tasks.crates-licenses]
workspace = false
dependencies = ["crates-licenses-bootstrap"]
command = "cargo"
args = ["license"]

[tasks.crates-licenses-sanity]
workspace = false
dependencies = ["crates-licenses-bootstrap"]
script = '''
cargo license --json > ${SAN_OUTPUT_DIR}/crates-licenses.json || /bin/true

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-licenses.json"
'''

# ------------------------------------------------------------------------------
# Show duplicated crates
# ------------------------------------------------------------------------------

[tasks.crates-duplicates]
workspace = false
script = '''
${SCRIPTS_DIR}/sanity/crates/duplicates.py --text
'''

[tasks.crates-duplicates-sanity]
workspace = false
script = '''
rm -f ${SAN_OUTPUT_DIR}/crates-duplicates.json

${SCRIPTS_DIR}/sanity/crates/duplicates.py > ${SAN_OUTPUT_DIR}/crates-duplicates.json

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-duplicates.json"
'''

# ------------------------------------------------------------------------------
# Show unused crates
# ------------------------------------------------------------------------------

[tasks.crates-unused-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-machete 1>/dev/null 2>&1
then
    cargo install cargo-machete
fi
'''

[tasks.crates-unused]
workspace = false
dependencies = ["crates-unused-bootstrap"]
command = "cargo"
args = ["machete"]

[tasks.crates-unused-sanity]
workspace = false
dependencies = ["crates-unused-bootstrap"]
script = '''
rm -f ${SAN_OUTPUT_DIR}/crates-unused.txt

cargo machete 1>${SAN_OUTPUT_DIR}/crates-unused.txt 2>/dev/null | true

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-unused.txt"
'''

# ------------------------------------------------------------------------------
# Show upgradable crates
# ------------------------------------------------------------------------------

[tasks.crates-upgradables-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-outdated 1>/dev/null 2>&1
then
    cargo install cargo-outdated
fi
'''

[tasks.crates-upgradables]
workspace = false
dependencies = ["crates-upgradables-bootstrap"]
script = '''
${SCRIPTS_DIR}/sanity/crates/upgradables.py --text
'''

[tasks.crates-upgradables-sanity]
workspace = false
dependencies = ["crates-upgradables-bootstrap"]
script = '''
rm -f ${SAN_OUTPUT_DIR}/crates-upgradables.json

${SCRIPTS_DIR}/sanity/crates/upgradables.py > ${SAN_OUTPUT_DIR}/crates-upgradables.json

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/crates-upgradables.json"
'''

# ------------------------------------------------------------------------------
# Sanity reports generation
# ------------------------------------------------------------------------------

[tasks.sanity-setup]
workspace = false
script = '''
mkdir -p ${SAN_OUTPUT_DIR}
'''

[tasks.sanity]
workspace = false
run_task = { name = [
    "sanity-setup",
    "doc-sanity",
    "build-timings-sanity",
    "cov-docs-sanity",
    "cov-tests-sanity",
    "cov-test-plans-sanity",
    "crates-audit-sanity",
    "crates-bloats-sanity",
    "crates-duplicates-sanity",
    "crates-licenses-sanity",
    "crates-unused-sanity",
    "crates-upgradables-sanity"
] }

# ------------------------------------------------------------------------------
# Documentations generation
# ------------------------------------------------------------------------------

[tasks.doc]
workspace = false
script = '''
cargo doc ${CARGO_DEFAULT_OPTS} --offline --no-deps
'''

[tasks.doc-sanity]
workspace = false
dependencies = ["doc"]
script = '''
rm -rf ${SAN_OUTPUT_DIR}/doc

cp -rf ${DOCS_OUTPUT_DIR} ${SAN_OUTPUT_DIR}/

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/doc"
'''

# ------------------------------------------------------------------------------
# Documentation coverage targets
# ------------------------------------------------------------------------------

# Generate documentation coverage results
[tasks.cov-docs-build]
workspace = false
private = true
env.RUSTDOCFLAGS = "-Zunstable-options --show-coverage"
script = '''
mkdir -p ${DOCS_COV_OUTPUT_DIR}

cargo doc \
    -j 1 \
    ${CARGO_DEFAULT_OPTS} \
    --no-deps \
    --document-private-items \
    --target-dir \
    ${DOCS_COV_OUTPUT_DIR} \
    1>${DOCS_COV_RESULTS} 2>&1

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${DOCS_COV_RESULTS}"
'''

# Convert the coverage results to HTML
[tasks.cov-docs-html]
workspace = false
private = true
script.main = '''
${ROOT}/scripts/sanity/coverage/doc-coverage-2-html.py ${DOCS_COV_RESULTS} ${DOCS_COV_HTML}

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${DOCS_COV_HTML}"
'''

# Show the documentation coverage report generated
[tasks.cov-docs-show]
workspace = false
script = '''
open ${DOCS_COV_HTML}
'''

# Generate all documentation and the HTML coverage report
[tasks.cov-docs]
workspace = false
run_task = { name = [
    "cov-docs-build",
    "cov-docs-html"
] }

[tasks.cov-docs-sanity]
workspace = false
dependencies = ["cov-docs"]
script = '''
cp ${DOCS_COV_HTML} ${SAN_OUTPUT_DIR}/docs-coverage.html
echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/docs-coverage.html"
'''

# ------------------------------------------------------------------------------
# Tests coverage targets
# ------------------------------------------------------------------------------

[tasks.cov-tests-bootstrap]
workspace = false
private = true
script = '''
if ! command -v cargo-tarpaulin 1>/dev/null 2>&1
then
    cargo install cargo-tarpaulin
fi
'''

# Show the test coverage report generated
[tasks.cov-tests-show]
workspace = false
script = '''
open ${TESTS_COV_HTML}
'''

# Generate the tests coverage report
[tasks.cov-tests]
workspace = false
dependencies = ["cov-tests-bootstrap"]
script.main = '''
cargo tarpaulin ${CARGO_DEFAULT_OPTS} --all-targets -o html

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${TESTS_COV_HTML}"
'''

[tasks.cov-tests-sanity]
workspace = false
dependencies = ["cov-tests"]
script = '''
cp ${TESTS_COV_HTML} ${SAN_OUTPUT_DIR}/tests-coverage.html
echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/tests-coverage.html"
'''

# ------------------------------------------------------------------------------
# Test plans coverage targets
# ------------------------------------------------------------------------------

[tasks.cov-test-plans-sanity]
workspace = false
script.main = '''
${SCRIPTS_DIR}/sanity/coverage/test-plan.py \
    -p ${ROOT}/docs \
    -s ${ROOT}/crates \
    > ${SAN_OUTPUT_DIR}/cov-test-plans.json

echo "${B}[cargo-make]${NC} ${BY}STEP${NC} - Generated: ${SAN_OUTPUT_DIR}/cov-test-plans.json"
'''
